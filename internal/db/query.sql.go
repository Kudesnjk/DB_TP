// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const insertForum = `-- name: InsertForum :exec
insert into forums (slug, title, user_nickname) values($1, $2, $3)
`

type InsertForumParams struct {
	Slug         string `json:"slug"`
	Title        string `json:"title"`
	UserNickname string `json:"user_nickname"`
}

func (q *Queries) InsertForum(ctx context.Context, arg InsertForumParams) error {
	_, err := q.exec(ctx, q.insertForumStmt, insertForum, arg.Slug, arg.Title, arg.UserNickname)
	return err
}

const insertUser = `-- name: InsertUser :exec
insert into users (nickname, email, fullname, about) values($1, $2, $3, $4)
`

type InsertUserParams struct {
	Nickname string         `json:"nickname"`
	Email    string         `json:"email"`
	Fullname string         `json:"fullname"`
	About    sql.NullString `json:"about"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.exec(ctx, q.insertUserStmt, insertUser,
		arg.Nickname,
		arg.Email,
		arg.Fullname,
		arg.About,
	)
	return err
}

const selectUserByNickname = `-- name: SelectUserByNickname :one
select fullname, nickname, email, about from users where nickname = $1
`

type SelectUserByNicknameRow struct {
	Fullname string         `json:"fullname"`
	Nickname string         `json:"nickname"`
	Email    string         `json:"email"`
	About    sql.NullString `json:"about"`
}

func (q *Queries) SelectUserByNickname(ctx context.Context, nickname string) (SelectUserByNicknameRow, error) {
	row := q.queryRow(ctx, q.selectUserByNicknameStmt, selectUserByNickname, nickname)
	var i SelectUserByNicknameRow
	err := row.Scan(
		&i.Fullname,
		&i.Nickname,
		&i.Email,
		&i.About,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
update users
   set about = $1 , email = $2, fullname = $3 
 where nickname = $4
`

type UpdateUserParams struct {
	About    sql.NullString `json:"about"`
	Email    string         `json:"email"`
	Fullname string         `json:"fullname"`
	Nickname string         `json:"nickname"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser,
		arg.About,
		arg.Email,
		arg.Fullname,
		arg.Nickname,
	)
	return err
}
